/* E to C v1.0 by Deniil715! */
/* */
/* Script which, together with Annotate, does the large dirty work */
/* When porting a program from Amiga-E to C. */

OPTIONS RESULTS

ADDRESS "Annotate_Rexx"

SET WRK_WIN "Untitled"
IF rc=5 THEN EXIT

MOVE_CURSOR ABS 0 0
INSERT STRING "#include <onyxsoft/EString.h>"
INSERT RETURN 1
INSERT STRING "#include <onyxsoft/Val.h>"
INSERT RETURN 1
INSERT STRING "#include <stdio.h>"
INSERT RETURN 2

SET REPLACE_PROMPT_TYPE 0

SAY "1. {x}   =>   &x"
SET FIND_TEXT "}"
SET REPLACE_TEXT ""
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "{"
SET REPLACE_TEXT "&"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "2. END*   =>   }"
SET REPLACE_TEXT "}"

SET FIND_TEXT "ENDPROC"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "ENDIF"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "ENDWHILE"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "ENDFOR"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "ENDOBJECT"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "ENDSELECT"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "ENDLOOP"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "3. PROC IS   =>   void {}"
SET FIND_TEXT "PROC"
SET SEARCH_FROM_BEG ON
ACTION FIND
DO WHILE RC=0
 DOMENU ERASE
 INSERT STRING "void"
 ACTION FIND_IN_LINE " IS"
 IF RC=0 THEN DO
  BACKSPACE 2
  INSERT STRING "{"
  MOVE_CURSOR REL 10000000 0
  INSERT STRING '; }'
 END
 ELSE DO
  MOVE_CURSOR REL 10000000 0
  INSERT STRING " {"
 END
 ACTION FIND
END

SAY "4. ELSEIF   =>   } else IF"
SET FIND_TEXT "ELSEIF"
SET SEARCH_FROM_BEG ON
ACTION FIND
DO WHILE RC=0
 DOMENU ERASE
 INSERT STRING "}"
 INSERT RETURN 1
 INSERT STRING "else IF"
 ACTION FIND
END

SAY "5. CASE,DEFAULT   =>   break; case,break; default:"
SET FIND_TEXT "CASE"
SET SEARCH_FROM_BEG ON
ACTION FIND
DO WHILE RC=0
 INSERT STRING "  break;"
 INSERT RETURN 1
 BACKSPACE 2
 DOMENU LOWER_CASE
 ACTION FIND
END

SET FIND_TEXT "DEFAULT"
SET SEARCH_FROM_BEG ON
ACTION FIND
DO WHILE RC=0
 INSERT STRING "  break;"
 INSERT RETURN 1
 DOMENU LOWER_CASE
 INSERT STRING ":"
 ACTION FIND
END

SAY "6. IF THEN,WHILE DO,FOR DO   =>   if() ; {,while() ; {,for() ; {"
DO xx=0 TO 3
 IF xx=0 THEN DO
  SET FIND_TEXT "IF "
  repl="if("
  inl=" THEN"
 END
 ELSE IF xx=1 THEN DO
  SET FIND_TEXT "WHILE "
  repl="while("
  inl=" DO"
 END
 ELSE IF xx=2 THEN DO
  SET FIND_TEXT "FOR "
  repl="for("
  inl=" DO"
 END
 SET SEARCH_FROM_BEG ON
 ACTION FIND
 DO WHILE RC=0
  DOMENU ERASE
  INSERT STRING repl
  ACTION FIND_IN_LINE inl
  IF RC=0 THEN DO
   BACKSPACE 3
   IF xx=0 THEN BACKSPACE 2
   INSERT STRING ")"
   MOVE_CURSOR REL 10000000 0
   INSERT STRING ';'
  END
  ELSE DO
   MOVE_CURSOR REL 10000000 0
   INSERT STRING ') {'
  END
  ACTION FIND
 END
END

SAY "7. EXIT   =>   if() break;"
SET FIND_TEXT "EXIT "
SET SEARCH_FROM_BEG ON
ACTION FIND
DO WHILE RC=0
 DOMENU ERASE
 INSERT STRING "if("
 MOVE_CURSOR REL 10000000 0
 INSERT STRING ') break;'
 ACTION FIND
END

SAY "8. SELECT   =>   switch() {"
SET FIND_TEXT "SELECT "
SET SEARCH_FROM_BEG ON
ACTION FIND
DO WHILE RC=0
 DOMENU ERASE
 INSERT STRING "switch("
 MOVE_CURSOR REL 10000000 0
 INSERT STRING ') {'
 ACTION FIND
END

SAY "9. UNTIL   =>   } while(!());"
SET FIND_TEXT "UNTIL "
SET SEARCH_FROM_BEG ON
ACTION FIND
DO WHILE RC=0
 DOMENU ERASE
 INSERT STRING "while(!("
 MOVE_CURSOR REL 10000000 0
 INSERT STRING '));'
 ACTION FIND
END

SAY "10. ELSE   =>   } else ; }"
SET FIND_TEXT " ELSE "
SET REPLACE_TEXT "; else "
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "ELSE"
SET SEARCH_FROM_BEG ON
ACTION FIND
DO WHILE RC=0
 DOMENU ERASE
 INSERT STRING "}"
 INSERT RETURN 1
 INSERT STRING "else {"
 ACTION FIND
END

SAY "11. =,:=   =>   ==,="
SET FIND_TEXT "="
SET REPLACE_TEXT "=="
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT ":=="
SET REPLACE_TEXT "="
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "<=="
SET REPLACE_TEXT "<="
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT ">=="
SET REPLACE_TEXT ">="
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "12. AND,OR,<>,NIL   =>   &&,||,!=,0"
SET FIND_TEXT " AND "
SET REPLACE_TEXT " && "
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT " OR "
SET REPLACE_TEXT " || "
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "<>"
SET REPLACE_TEXT "!="
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "NIL"
SET REPLACE_TEXT "NULL"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "13. $   =>   0x"
SET FIND_TEXT "$"
SET REPLACE_TEXT "0x"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "14. string,char   =>   char,string"
SET FIND_TEXT '22'x
SET REPLACE_TEXT '££'
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT '27'x
SET REPLACE_TEXT '22'x
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT '££'
SET REPLACE_TEXT '27'x
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT ":PTR TO "
SET REPLACE_TEXT "* "
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "15. WriteF,etc   =>   printf,etc"
SET FIND_TEXT "WriteF"
SET REPLACE_TEXT "printf"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT " TO"
SET REPLACE_TEXT ";"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "New("
SET REPLACE_TEXT "AllocVec("
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "Dispose("
SET REPLACE_TEXT "FreeVec("
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "doMethodA"
SET REPLACE_TEXT "DoMethod"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "16. ->,[],^   =>   //,[0],*"
SET FIND_TEXT "->"
SET REPLACE_TEXT "//"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "[]"
SET REPLACE_TEXT "[0]"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "^"
SET REPLACE_TEXT "*(long*)"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "17. KEYWORDS   =>   keywords"
SET FIND_TEXT ":ARRAY"
SET REPLACE_TEXT ""
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT ":LONG"
SET REPLACE_TEXT " long"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT ":INT"
SET REPLACE_TEXT " short"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT ":CHAR"
SET REPLACE_TEXT " char"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "MODULE"
SET REPLACE_TEXT "#include"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "OBJECT"
SET REPLACE_TEXT "struct"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "RETURN"
SET REPLACE_TEXT "return"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "SIZEOF "
SET REPLACE_TEXT "sizeof("
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "ENUM "
SET REPLACE_TEXT "enum {"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "OLDFILE"
SET REPLACE_TEXT "MODE_OLDFILE"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "NEWFILE"
SET REPLACE_TEXT "MODE_NEWFILE"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "REPEAT"
SET REPLACE_TEXT "do {"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "LOOP"
SET REPLACE_TEXT "while(1) {"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "DEF "
SET REPLACE_TEXT "long "
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "18. \d,etc   =>   %d,etc"
SET FIND_TEXT "\d"
SET REPLACE_TEXT "%ld"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "\h"
SET REPLACE_TEXT "%lx"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "\c"
SET REPLACE_TEXT "%c"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "\b"
SET REPLACE_TEXT "\r"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "\s"
SET REPLACE_TEXT "%s"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "19. INC,DEC   =>   ++,--"
SET FIND_TEXT "INC "
SET REPLACE_TEXT "++ "
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "DEC "
SET REPLACE_TEXT "--"
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "20. Long,Int,Char   =>   *(long*),*(short*),*(unsigned char*),"
SET FIND_TEXT "Long("
SET REPLACE_TEXT "*(long*)("
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "Int("
SET REPLACE_TEXT "*(short*)("
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT "Char("
SET REPLACE_TEXT "*(unsigned char*)("
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SAY "21. self. -> "
SET FIND_TEXT "(self."
SET REPLACE_TEXT ""
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT ",self."
SET REPLACE_TEXT ""
SET SEARCH_FROM_BEG ON
ACTION REPLACE

SET FIND_TEXT " self."
SET REPLACE_TEXT ""
SET SEARCH_FROM_BEG ON
ACTION REPLACE

/*
SET FIND_TEXT ""
SET REPLACE_TEXT ""
SET SEARCH_FROM_BEG ON
ACTION REPLACE
*/

SAY "22. Append ; to end of some lines"
MOVE_CURSOR ABS 0 0
DeltaY=1
DO WHILE DeltaY=1
 MOVE_CURSOR REL 10000000 0
 MOVE_CURSOR REL "-1" 0
 GET CHR
 PARSE VAR RESULT char stuff
 IF char>='0' & char<='9' | char>='A' & char<='Z' | char>='a' & char<='z' | char='22'x | char=')' | char='27'x THEN DO
  MOVE_CURSOR REL 1 0
  INSERT STRING ";"
 END
 MOVE_CURSOR REL 0 1
 PARSE VAR RESULT dx DeltaY stuff
END
SAY "All done!!"
SAY ""

