<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE Ann-SyntaxHighlighting>
<!-- There are 5 special characters that need to be coded:    -->
<!-- & - &amp;   < - &lt;   > - &gt;   " - &quot;   ' - &apos; -->
<Ann-SyntaxHighlighting>

   <!-- Add your own syntax files here: -->
   <!-- <SyntaxFile filename="my_syntax.xml"/> -->

  <Syntax>
    <Name>Amiga Guide</Name>
    <Qualifying>
      <OrTokens min="15">@{ }</OrTokens>
      <OrTokens min="1" mandatory="1" caseinsensitive="1">@database</OrTokens>
      <OrTokens min="10">@node @endnode @NODE @ENDNODE @Node @Endnode</OrTokens>
      <FilePattern>#?.guide</FilePattern>
    </Qualifying>
    <Tokens>15</Tokens>
    <Token style="bold">@{b}</Token>
    <Token style="bold">@{ub}</Token>
    <Token style="underline">@{u}</Token>
    <Token style="underline">@{uu}</Token>
    <Token style="italic">@{i}</Token>
    <Token style="italic">@{ui}</Token>
    <Token pen="253">@VER:</Token>
    <Token pen="253">@(c)</Token>
    <ComplexToken>
      <Token pen="3"><![CDATA[" ]]></Token>
      <MatchToToken>}</MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="4">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3">@{</Token>
      <MatchToToken>}</MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3">@{</Token>
      <MatchToToken>&quot;</MatchToToken>
    </ComplexToken>
    <ComplexToken type="alpha"> <!--Part of an e-mail should not be coloured-->
      <Token>@</Token>
      <MatchToToken>.</MatchToToken>
    </ComplexToken>
    <ComplexToken type="alpha">
      <Token pen="254">@</Token>
    </ComplexToken>
  </Syntax>

  <Syntax>
    <Name>XML</Name>
    <Qualifying>
      <OrTokens min="15"><![CDATA[/> </ >]]></OrTokens>
      <AndTokens><![CDATA[<?xml </ >]]></AndTokens>
      <FilePattern>#?.(xml|sgml)</FilePattern>
    </Qualifying>
    <Tokens>10</Tokens>
    <ComplexToken>
      <Token pen="4">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="12"><![CDATA[<!--]]></Token>
      <MatchToToken>--></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3"><![CDATA[<![]]></Token>
      <MatchToToken>]></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3"><![CDATA[<!]]></Token>
      <MatchToToken>></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3"><![CDATA[<?]]></Token>
      <MatchToToken>></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="2">&amp;</Token>
      <MatchToToken>;</MatchToToken>
    </ComplexToken>
    <Token pen="254" style="bold"><![CDATA[</]]></Token>
    <Token pen="254" style="bold">/></Token>
    <Token pen="254" style="bold">&lt;</Token>
    <Token pen="254" style="bold">&gt;</Token>
  </Syntax>

  <Syntax>
    <Name>Amiga-E</Name>
    <Qualifying>
      <OrTokens min="10">ENDIF FOR WHILE DEF PROC CONST</OrTokens>
      <AndTokens>( ) , DEF</AndTokens>
      <FilePattern>#?.e</FilePattern>
    </Qualifying>
    <Tokens>110</Tokens>
    <!--Keywords-->
    <Token style="bold">AND</Token>
    <Token style="bold">ASM</Token>
    <Token style="bold">ARRAY</Token>
    <Token style="bold">BUT</Token>
    <Token style="bold">CASE</Token>
    <Token style="bold">CHAR</Token>
    <Token style="bold">CONST</Token>
    <Token style="bold">DEC</Token>
    <Token style="bold">DEFAULT</Token>
    <Token style="bold">DEF</Token>
    <Token style="bold">DO</Token>
    <Token style="bold">ELSEIF</Token>
    <Token style="bold">ELSE</Token>
    <Token style="bold">EMPTY</Token>
    <Token style="bold">END</Token>
    <Token style="bold">ENUM</Token>
    <Token style="bold">EXCEPT</Token>
    <Token style="bold">EXIT</Token>
    <Token style="bold">EXPORT</Token>
    <Token style="bold">FOR</Token>
    <Token style="bold">HANDLE</Token>
    <Token style="bold">IF</Token>
    <Token style="bold">INCBIN</Token>
    <Token style="bold">INC</Token>
    <Token style="bold">INT</Token>
    <Token style="bold">IS</Token>
    <Token style="bold">JUMP</Token>
    <Token style="bold">LARGE</Token>
    <Token style="bold">LIST</Token>
    <Token style="bold">LONG</Token>
    <Token style="bold">LOOP</Token>
    <Token style="bold">MODULE</Token>
    <Token style="bold">OBJECT</Token>
    <Token style="bold">OF</Token>
    <Token style="bold">OPT</Token>
    <Token style="bold">OR</Token>
    <Token style="bold">OSVERSION</Token>
    <Token style="bold">PROC</Token>
    <Token style="bold">PTR</Token>
    <Token style="bold">PREPROCESS</Token>
    <Token style="bold">PRIVATE</Token>
    <Token style="bold">PUBLIC</Token>
    <Token style="bold">RAISE</Token>
    <Token style="bold">REG</Token>
    <Token style="bold">REPEAT</Token>
    <Token style="bold">RETURN</Token>
    <Token style="bold">SELECT</Token>
    <Token style="bold">SET</Token>
    <Token style="bold">SIZEOF</Token>
    <Token style="bold">STACK</Token>
    <Token style="bold">STEP</Token>
    <Token style="bold">STRING</Token>
    <Token style="bold">SUPER</Token>
    <Token style="bold">THEN</Token>
    <Token style="bold">TO</Token>
    <Token style="bold">UNTIL</Token>
    <Token style="bold">VOID</Token>
    <Token style="bold">WHILE</Token>
    <!--Consts-->
    <Token pen="14">ALL</Token>
    <Token pen="14">FALSE</Token>
    <Token pen="14">GADGETSIZE</Token>
    <Token pen="14">NEWFILE</Token>
    <Token pen="14">NIL</Token>
    <Token pen="14">OLDFILE</Token>
    <Token pen="14">TRUE</Token>
    <Token style="bold">NEW</Token> <!--must be after NEWFILE-->
    <ComplexToken type="alphaupper"> <!--Handles all ENDFOR, ENDIF etc.-->
      <Token style="bold">END</Token>
    </ComplexToken>
    <Token>()</Token>
    <Token pen="2">:=</Token>
    <Token pen="2">++</Token>
    <Token pen="2">--</Token>
    <Token style="bold" absolute="true">(</Token>
    <Token style="bold" absolute="true">)</Token>
    <Token style="bold">:</Token>
    <Token style="bold">,</Token>
    <Token pen="2" bgpen="4">==</Token>
    <Token pen="2" bgpen="4">!=</Token>
    <!--String and char-const tokens:-->
    <ComplexToken>
      <Token pen="13">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="4">&apos;</Token>
      <MatchToToken>&apos;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <!--Comments...-->
    <ComplexToken>
      <Token pen="12" style="italic">-></Token>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="12" absolute="true">/*</Token>
      <MatchToToken>*/</MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <Token pen="12">*/</Token>
    <!--Preprocessing directives...-->
    <ComplexToken type="alphalower">
      <Token pen="253">#</Token>
    </ComplexToken>
  </Syntax>

  <Syntax>
    <Name>PortablE</Name>
    <Qualifying>
      <OrTokens min="10">ENDIF FOR WHILE DEF PROC CONST</OrTokens>
      <OrTokens min="5" mandatory="1">FINALLY POINTER VALUE BOOL CLASS SHL SHR NATIVE ENDNATIVE !!ARRAY !!PTR</OrTokens>
      <AndTokens>( ) , DEF</AndTokens>
      <FilePattern>#?.e</FilePattern>
    </Qualifying>
    <Tokens>110</Tokens>
    <!--Keywords-->
    <Token style="bold">AND</Token>
    <Token style="bold">ARRAY</Token>
    <Token style="bold">BIGVALUE</Token>
    <Token style="bold">BOOL</Token>
    <Token style="bold">BUT</Token>
    <Token style="bold">BYTE</Token>
    <Token style="bold">CALLBACK</Token>
    <Token style="bold">CASE</Token>
    <Token style="bold">CHAR</Token>
    <Token style="bold">CLASS</Token>
    <Token style="bold">CLASSTYPE</Token>
    <Token style="bold">CONST</Token>
    <Token style="bold">DEFAULT</Token>
    <Token style="bold">DEF</Token>
    <Token style="bold">DO</Token>
    <Token style="bold">ELSE</Token>
    <Token style="bold">ELSEIF</Token>
    <Token style="bold">EMPTY</Token>
    <Token style="bold">END</Token>
    <Token style="bold">ENUM</Token>
    <Token style="bold">EXPORT</Token>
    <Token style="bold">FINALLY</Token>
    <Token style="bold">FLOAT</Token>
    <Token style="bold">FOR</Token>
    <Token style="bold">FUNC</Token>
    <Token style="bold">IF</Token>
    <Token style="bold">ILIST</Token>
    <Token style="bold">INLINE</Token>
    <Token style="bold">INT</Token>
    <Token style="bold">IMPLEMENTS</Token>
    <Token style="bold">IS</Token>
    <Token style="bold">LARGE</Token>
    <Token style="bold">LIST</Token>
    <Token style="bold">LONG</Token>
    <Token style="bold">LOOP</Token>
    <Token style="bold">MODULE</Token>
    <Token style="bold">NATIVE</Token>
    <Token style="bold">NOPTRTOCHAR</Token>
    <Token style="bold">NOT</Token>
    <Token style="bold">OBJECT</Token>
    <Token style="bold">OF</Token>
    <Token style="bold">OPT</Token>
    <Token style="bold">OPTIMISE</Token>
    <Token style="bold">OR</Token>
    <Token style="bold">ORPHAN</Token>
    <Token style="bold">OSVERSION</Token>
    <Token style="bold">PROC</Token>
    <Token style="bold">PTR</Token>
    <Token style="bold">PREPROCESS</Token>
    <Token style="bold">POINTER</Token>
    <Token style="bold">PRIVATE</Token>
    <Token style="bold">PROTECTED</Token>
    <Token style="bold">PROTOTYPE</Token>
    <Token style="bold">PUBLIC</Token>
    <Token style="bold">QUAD</Token>
    <Token style="bold">RAISE</Token>
    <Token style="bold">REPEAT</Token>
    <Token style="bold">REPLACEMENT</Token>
    <Token style="bold">RETURN</Token>
    <Token style="bold">RETURNS</Token>
    <Token style="bold">SELECT</Token>
    <Token style="bold">SET</Token>
    <Token style="bold">SHL</Token>
    <Token style="bold">SHR</Token>
    <Token style="bold">SIZEOF</Token>
    <Token style="bold">STATIC</Token>
    <Token style="bold">STEP</Token>
    <Token style="bold">STRING</Token>
    <Token style="bold">SUPER</Token>
    <Token style="bold">THEN</Token>
    <Token style="bold">MULTITHREADED</Token>
    <Token style="bold">TO</Token>
    <Token style="bold">TYPEOF</Token>
    <Token style="bold">UNGENERIC</Token>
    <Token style="bold">UNTIL</Token>
    <Token style="bold">VALUE</Token>
    <Token style="bold">VOID</Token>
    <Token style="bold">WHILE</Token>
    <Token style="bold">XOR</Token>
    <!--Consts-->
    <Token pen="14">ALL</Token>
    <Token pen="14">FALSE</Token>
    <Token pen="14">NIL</Token>
    <Token pen="14">NILA</Token>
    <Token pen="14">NILS</Token>
    <Token pen="14">TRUE</Token>
    <Token style="bold">NEW</Token> <!--must be after NEWFILE-->
    <ComplexToken type="alphaupper"> <!--Handles all ENDFOR, ENDIF etc.-->
      <Token style="bold">END</Token>
    </ComplexToken>
    <Token>()</Token>
    <Token pen="2">:=</Token>
    <Token pen="2">++</Token>
    <Token pen="2">--</Token>
    <Token pen="2" bgpen="0" style="bold">!!</Token>
    <Token style="bold" absolute="true">(</Token>
    <Token style="bold" absolute="true">)</Token>
    <Token style="bold">:</Token>
    <Token style="bold">,</Token>
    <Token pen="2" bgpen="4">==</Token>
    <Token pen="2" bgpen="4">!=</Token>
    <!--String and char-const tokens:-->
    <ComplexToken>
      <Token pen="13">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="4">&apos;</Token>
      <MatchToToken>&apos;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="253">{</Token>
      <MatchToToken>}</MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <!--Comments...-->
    <ComplexToken>
      <Token pen="12" style="italic">-></Token>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="12" absolute="true">/*</Token>
      <MatchToToken>*/</MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <Token pen="12">*/</Token>
    <!--Preprocessing directives...-->
    <ComplexToken type="alphalower">
      <Token pen="253">#</Token>
    </ComplexToken>
  </Syntax>

  <Syntax>
    <Name>HTML</Name>
    <Qualifying>
      <OrTokens min="12"><![CDATA[/> </ >]]></OrTokens>
      <AndTokens caseinsensitive="1"><![CDATA[<html> <body]]></AndTokens>
      <FilePattern>#?.(html|htm)</FilePattern>
    </Qualifying>
    <Tokens>100</Tokens>
    <ComplexToken>
      <Token pen="4">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="12"><![CDATA[<!--]]></Token>
      <MatchToToken>--></MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3"><![CDATA[<!]]></Token>
      <MatchToToken>></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="3"><![CDATA[<?]]></Token>
      <MatchToToken>></MatchToToken>
    </ComplexToken>
    <ComplexToken>
      <Token pen="2">&amp;</Token>
      <MatchToToken>;</MatchToToken>
    </ComplexToken>
    <Token pen="14" style="bold" caseinsensitive="1"><![CDATA[<br>]]></Token>

    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h1>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h2>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h3>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h4>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h5>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<h6>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<p>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<html>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<body>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<title>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<b>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<big>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<em>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<i>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<small>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<strong>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<sub>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<sup>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<ins>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<del>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<s>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<strike>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<u>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<code>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<kbd>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<samp>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<tt>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<var>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<pre>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<abbr>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<acronym>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<address>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<bdo>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<q>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<cite>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[<dfn>]]></Token>

    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h1>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h2>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h3>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h4>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h5>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</h6>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</p>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</html>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</body>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</title>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</b>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</big>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</em>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</i>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</small>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</strong>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</sub>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</sup>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</ins>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</del>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</s>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</strike>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</u>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</code>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</kbd>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</samp>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</tt>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</var>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</pre>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</abbr>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</acronym>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</address>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</bdo>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</q>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</cite>]]></Token>
    <Token pen="1" style="bold" caseinsensitive="1"><![CDATA[</dfn>]]></Token>
    <ComplexToken type="alpha">
      <Token style="bold" pen="14"><![CDATA[</]]></Token>
      <MatchToToken>&gt;</MatchToToken>
    </ComplexToken>
    <ComplexToken type="alpha">
      <Token style="bold" pen="14">&lt;</Token>
    </ComplexToken>
    <Token pen="14" style="bold">/></Token>
    <Token pen="14" style="bold">&gt;</Token>
    <Token pen="254" style="bold"><![CDATA[</]]></Token>
    <Token pen="254" style="bold">&lt;</Token>
  </Syntax>

  <Syntax>
    <Name>C/C++</Name>
    <!--Rules for how to determain if a text is in this language:-->
    <Qualifying>
      <OrTokens min="12">while int void #include #define struct</OrTokens>
      <AndTokens>{ } ( ) , ; *</AndTokens>
      <FilePattern>#?.(c|cpp|h|hpp)</FilePattern>
    </Qualifying>
    <!--Make sure tokens is large enough to hold all tokens incl special tokens.-->
    <Tokens>100</Tokens>
    <Token style="bold">if</Token>
    <Token style="bold">for</Token>
    <Token style="bold">while</Token>
    <Token style="bold">do</Token>
    <Token style="bold">else</Token>
    <Token style="bold">switch</Token>
    <Token style="bold">case</Token>
    <Token style="bold">break</Token>
    <Token style="bold">continue</Token>
    <Token style="bold">default</Token>
    <Token style="bold">return</Token>
    <Token style="bold">struct</Token>
    <Token style="bold">sizeof</Token>
    <Token style="bold">try</Token>
    <Token style="bold">throw</Token>
    <Token style="bold">catch</Token>
    <Token style="bold">namespace</Token>
    <Token style="bold">operator</Token>
    <Token style="bold">using</Token>
    <Token style="bold">new</Token>
    <Token style="bold">delete</Token>
    <Token style="bold">typedef</Token>
    <Token style="bold">enum</Token>
    <Token style="bold">extern</Token>
    <Token style="bold">class</Token>
    <Token style="bold">private</Token>
    <Token style="bold">protected</Token>
    <Token style="bold">public</Token>
    <Token style="bold">static</Token>
    <Token style="bold">template</Token>
    <Token style="bold">inline</Token>
    <Token style="bold">const</Token>
    <Token style="bold">friend</Token>
    <Token style="bold">virtual</Token>
    <Token style="bold">volatile</Token>
    <Token style="bold">explicit</Token>
    <Token style="bold">true</Token>
    <Token style="bold">false</Token>
    <Token style="bold" pen="254">char</Token>
    <Token style="bold" pen="254">int</Token>
    <Token style="bold" pen="254">short</Token>
    <Token style="bold" pen="254">long</Token>
    <Token style="bold" pen="254">signed</Token>
    <Token style="bold" pen="254">unsigned</Token>
    <Token style="bold" pen="254">void</Token>
    <Token style="bold" pen="254">float</Token>
    <Token style="bold" pen="254">double</Token>
    <Token style="bold" pen="254">bool</Token>
    <Token pen="2" bgpen="4">:=</Token>
    <Token>()</Token>
    <Token>==</Token>
    <Token>!=</Token>
    <Token><![CDATA[<=]]></Token>
    <Token>>=</Token>
    <Token style="bold" absolute="true">(</Token>
    <Token style="bold" absolute="true">)</Token>
    <Token style="bold">;</Token>
    <Token style="bold">,</Token>
    <Token style="bold" pen="253" absolute="true">{</Token>
    <Token style="bold" pen="253" absolute="true">}</Token>
    <Token pen="253">.</Token>
    <Token pen="253">-></Token>
    <!--Variable altering operators:-->
    <Token pen="2">=</Token>
    <Token pen="2">+=</Token>
    <Token pen="2">-=</Token>
    <Token pen="2">*=</Token>
    <Token pen="2">/=</Token>
    <Token pen="2">|=</Token>
    <Token pen="2"><![CDATA[&=]]></Token>
    <Token pen="2"><![CDATA[<<=]]></Token>
    <Token pen="2"><![CDATA[>>=]]></Token>
    <Token pen="2">++</Token>
    <Token pen="2">--</Token>
    <!--String and char-const tokens:-->
    <ComplexToken>
      <Token pen="4">&quot;</Token>
      <MatchToToken>&quot;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="13">&apos;</Token>
      <MatchToToken>&apos;</MatchToToken>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken type="hexnumber">
      <Token pen="10">0x</Token>
    </ComplexToken>
    <ComplexToken type="decnumber">
      <Token pen="10"/>
    </ComplexToken>
    <!--Comments...-->
    <ComplexToken>
      <Token pen="12" style="italic">//</Token>
      <MatchToEOL/>
    </ComplexToken>
    <ComplexToken>
      <Token pen="12" absolute="true">/*</Token>
      <MatchToToken>*/</MatchToToken>
      <MultiLine/>
    </ComplexToken>
    <Token pen="2" bgpen="4">*/</Token>
    <!--Preprocessing directives...-->
    <ComplexToken type="alphalower">
      <Token pen="14">#</Token>
    </ComplexToken>
  </Syntax>

</Ann-SyntaxHighlighting>
